<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gig.collide.mapper.MessageSettingMapper">

    <!-- 消息设置列表查询（Controller专用） -->
    <select id="selectMessageSettingList" resultMap="BaseResultMap">
        SELECT * FROM t_message_setting
        WHERE 1=1
        <if test="userId != null">
            AND user_id = #{userId}
        </if>
        <if test="settingType != null and settingType != ''">
            AND (
                (settingType = 'stranger' AND allow_stranger_msg = 1)
                OR (settingType = 'receipt' AND auto_read_receipt = 1)
                OR (settingType = 'notification' AND message_notification = 1)
            )
        </if>
        <if test="status != null and status != ''">
            AND status = #{status}
        </if>
        <if test="isEnabled != null">
            AND (
                (isEnabled = true AND (allow_stranger_msg = 1 OR auto_read_receipt = 1 OR message_notification = 1))
                OR (isEnabled = false AND (allow_stranger_msg = 0 AND auto_read_receipt = 0 AND message_notification = 0))
            )
        </if>
        <if test="keyword != null and keyword != ''">
            AND (
                user_id IN (SELECT id FROM t_user WHERE nickname LIKE CONCAT('%', #{keyword}, '%'))
                OR user_id IN (SELECT id FROM t_user WHERE username LIKE CONCAT('%', #{keyword}, '%'))
            )
        </if>
        <choose>
            <when test="orderBy == 'userId' and orderDirection == 'ASC'">
                ORDER BY user_id ASC, create_time DESC
            </when>
            <when test="orderBy == 'userId'">
                ORDER BY user_id DESC, create_time DESC
            </when>
            <when test="orderBy == 'allowStrangerMsg' and orderDirection == 'ASC'">
                ORDER BY allow_stranger_msg ASC, create_time DESC
            </when>
            <when test="orderBy == 'allowStrangerMsg'">
                ORDER BY allow_stranger_msg DESC, create_time DESC
            </when>
            <when test="orderBy == 'autoReadReceipt' and orderDirection == 'ASC'">
                ORDER BY auto_read_receipt ASC, create_time DESC
            </when>
            <when test="orderBy == 'autoReadReceipt'">
                ORDER BY auto_read_receipt DESC, create_time DESC
            </when>
            <when test="orderBy == 'messageNotification' and orderDirection == 'ASC'">
                ORDER BY message_notification ASC, create_time DESC
            </when>
            <when test="orderBy == 'messageNotification'">
                ORDER BY message_notification DESC, create_time DESC
            </when>
            <when test="orderBy == 'updateTime' and orderDirection == 'ASC'">
                ORDER BY update_time ASC
            </when>
            <when test="orderBy == 'updateTime'">
                ORDER BY update_time DESC
            </when>
            <when test="orderBy == 'createTime' and orderDirection == 'ASC'">
                ORDER BY create_time ASC
            </when>
            <otherwise>
                ORDER BY create_time DESC
            </otherwise>
        </choose>
    </select>

    <!-- 基础 ResultMap -->
    <resultMap id="BaseResultMap" type="com.gig.collide.domain.MessageSetting">
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="allow_stranger_msg" property="allowStrangerMsg"/>
        <result column="auto_read_receipt" property="autoReadReceipt"/>
        <result column="message_notification" property="messageNotification"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
    </resultMap>

    <!-- 根据用户ID查询消息设置 -->
    <!-- 索引使用: uk_user_id(user_id) - 唯一索引直接查询 -->
    <select id="findByUserId" resultMap="BaseResultMap">
        SELECT * FROM t_message_setting
        WHERE user_id = #{userId}
    </select>

    <!-- 更新陌生人消息设置 -->
    <!-- 索引使用: uk_user_id(user_id) - 唯一索引定位更新 -->
    <update id="updateStrangerMessageSetting">
        UPDATE t_message_setting 
        SET allow_stranger_msg = #{allowStrangerMsg},
            update_time = NOW()
        WHERE user_id = #{userId}
    </update>

    <!-- 更新已读回执设置 -->
    <!-- 索引使用: uk_user_id(user_id) - 唯一索引定位更新 -->
    <update id="updateReadReceiptSetting">
        UPDATE t_message_setting 
        SET auto_read_receipt = #{autoReadReceipt},
            update_time = NOW()
        WHERE user_id = #{userId}
    </update>

    <!-- 更新消息通知设置 -->
    <!-- 索引使用: uk_user_id(user_id) - 唯一索引定位更新 -->
    <update id="updateNotificationSetting">
        UPDATE t_message_setting 
        SET message_notification = #{messageNotification},
            update_time = NOW()
        WHERE user_id = #{userId}
    </update>

    <!-- 批量更新用户设置 -->
    <!-- 索引使用: uk_user_id(user_id) - 唯一索引定位批量更新 -->
    <update id="updateUserSettings">
        UPDATE t_message_setting 
        SET 
        <trim suffixOverrides=",">
            <if test="allowStrangerMsg != null">
                allow_stranger_msg = #{allowStrangerMsg},
            </if>
            <if test="autoReadReceipt != null">
                auto_read_receipt = #{autoReadReceipt},
            </if>
            <if test="messageNotification != null">
                message_notification = #{messageNotification},
            </if>
            update_time = NOW()
        </trim>
        WHERE user_id = #{userId}
    </update>

    <!-- 创建或更新用户设置 -->
    <!-- 索引使用: uk_user_id(user_id) - 唯一索引UPSERT操作 -->
    <insert id="insertOrUpdate">
        INSERT INTO t_message_setting (
            user_id, allow_stranger_msg, auto_read_receipt, 
            message_notification, create_time, update_time
        ) VALUES (
            #{userId}, 
            IFNULL(#{allowStrangerMsg}, 1), 
            IFNULL(#{autoReadReceipt}, 1),
            IFNULL(#{messageNotification}, 1), 
            NOW(), NOW()
        )
        ON DUPLICATE KEY UPDATE
            allow_stranger_msg = IFNULL(#{allowStrangerMsg}, allow_stranger_msg),
            auto_read_receipt = IFNULL(#{autoReadReceipt}, auto_read_receipt),
            message_notification = IFNULL(#{messageNotification}, message_notification),
            update_time = NOW()
    </insert>

</mapper>